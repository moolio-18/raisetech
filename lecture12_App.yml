AWSTemplateFormatVersion: 2010-09-09
#-----------------------------------------------------------------
# Parameters
#-----------------------------------------------------------------
Parameters:
  NameBase:
    Description: this is base name.
    Type: String
    Default: lecture10cf

  KeyName:
    Type: String
    Default: Practice#4  

  ImageId:
    Type: AWS::EC2::Image::Id
    Default: ami-0e2612a08262410c8

  RDSMasterUsername:
    Description: RDS Master User Name 
    Type: String
    MinLength: 4
    MaxLength: 16
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"

  HealthCheck: 
    Description: HealthCheckPath for ALB
    Type: String
    Default: /

#-----------------------------------------------------------------
# Resources
#-----------------------------------------------------------------
Resources:
#-------------EC2instance-----------------------------------------
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      KeyName: !Ref KeyName
      DisableApiTermination: false 
      ImageId: !Ref ImageId
      InstanceType: t2.micro
      Monitoring: false
      SecurityGroupIds:
        - !ImportValue EC2secGroup
      SubnetId: !ImportValue subnetC
      IamInstanceProfile: !ImportValue IamInstanceProfile
      UserData:
        Fn::Base64: |
          #!/bin/bash

          sudo yum update
          sudo yum -y install mysql
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"unzip awscliv2.zipsudo ./aws/install
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          sudo yum install nginx
          sudo amazon-linux-extras install nginx1

      Tags:
        - Key: Name
          Value: !Sub EC2-${NameBase}

#----------------RDS, RDSSubnetgroup------------------------------
  rdsDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: for rds subnet from cf 
      DBSubnetGroupName: !Sub ${NameBase}-DBSubnetGroup
      SubnetIds:
        - !ImportValue subnetB
        - !ImportValue subnetD
      Tags:
        - Key: Name
          Value: !Sub rdssubnetgroup-${NameBase}

  RDSSecret:
    Type: "AWS::SecretsManager::Secret"
    Properties:
      Description: "This is a Secrets Manager secret for an RDS DB instance"
      GenerateSecretString:
        SecretStringTemplate: '{"username": "admin"}'
        GenerateStringKey: "password"
        PasswordLength: 16
        ExcludeCharacters: "\"@'%$#&().,{_?<≠^>[:;`+*!]}=~|¥/\\"

  rdsDBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 20
      DBInstanceClass: db.t4g.micro
      AllowMajorVersionUpgrade: false
      AutoMinorVersionUpgrade: false
      AvailabilityZone:  !Select         
        - 1                             
        - Fn::GetAZs: !Ref AWS::Region  
      VPCSecurityGroups:
        - !ImportValue RDSsecGroup
      DBSubnetGroupName: !Ref rdsDBSubnetGroup 
      Engine: mysql
      EngineVersion: 8.0.35
      MasterUsername: !Ref RDSMasterUsername
      MasterUserPassword: !Join ['', ['{{resolve:secretsmanager:', !Ref RDSSecret, ':SecretString:password}}' ]]
      PubliclyAccessible: false
      StorageType: gp3
      Tags:
        - Key: Name
          Value: !Sub RDS-${NameBase}

#-------------applicationloadbalancer, listener, target-----------
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Type: application 
      Scheme: internet-facing
      SecurityGroups:
        - !ImportValue ALBsecGroup
      Subnets:
        - !ImportValue subnetA
        - !ImportValue subnetC
      Name: !Sub ALB-${NameBase}
      Tags:
        - Key: key
          Value: !Sub ALB-${NameBase}

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref ALBTarget
          Type: forward
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP

  ALBTarget:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 60
      HealthCheckPath: !Ref HealthCheck
      HealthCheckPort: traffic-port
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 30
      HealthyThresholdCount: 5
      IpAddressType: ipv4
      Protocol: HTTP
      Port: 80
      Name: !Sub ALBTarget-${NameBase}
      Tags: 
        - Key: Name
          Value: !Sub ALBTarget-${NameBase}
      TargetType: instance
      Targets: 
        - Id: !Ref EC2Instance
          Port: 80
      VpcId: !ImportValue VPC

# ----------------S3----------------------------------------------
  s3Bucket:
    Type: AWS::S3::Bucket
    Properties: 
      BucketName: !Sub s3-${NameBase}
      Tags:
        - Key: Name
          Value: !Sub s3-${NameBase}


